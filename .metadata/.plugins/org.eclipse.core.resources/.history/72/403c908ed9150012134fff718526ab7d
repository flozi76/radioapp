package ch.icaros.drs3;

import java.io.InputStream;
import java.net.URL;

import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Handler;
import android.app.Activity;
import android.graphics.drawable.Drawable;
import android.util.Log;
import android.view.Menu;
import android.view.MenuItem;
import android.view.View;
import android.widget.ImageButton;
import android.widget.ImageView;
import android.widget.TextView;
import android.support.v4.app.NavUtils;

public class MainActivity extends Activity {

	public static final String TAG = "DRS 3 Player";
	private Handler handler;
	private Drawable image;
	private ImageButton imageButtonstartStopMusic;
	TextView textViewSongTitle;
	private boolean onAir = false;
	long starttime = 0;
	
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        try {
			setContentView(R.layout.activity_main);
			
			imageButtonstartStopMusic = (ImageButton)findViewById(R.id.imageButtonStartStop);
			textViewSongTitle =  (TextView) findViewById(R.id.textViewSong);
			
			imageButtonstartStopMusic.setOnClickListener(new View.OnClickListener() {
	            public void onClick(View v) {
	            	
	                try {
						loadCurrentCover();
						
						if(onAir)
						{
							imageButtonstartStopMusic.setImageResource(R.drawable.stop);
						}
						else
						{
							imageButtonstartStopMusic.setImageResource(R.drawable.start);
						}
						onAir = !onAir;
						
					} catch (Exception e) {
						Log.e(TAG, e.toString(), e);
					}
	                
	 
	            }
	        });
			
			handler = new Handler();
			this.loadCurrentCover();
			this.runTimedCoverLoader();
		} catch (Exception e) {
			Log.e(TAG, e.getLocalizedMessage(), e);
		}
    }

    private void runTimedCoverLoader() {
    	 Runnable runnable = new Runnable() {

    	        @Override
    	        public void run() {
    	           long millis = System.currentTimeMillis() - starttime;
    	           int seconds = (int) (millis / 1000);
    	           int minutes = seconds / 60;
    	           seconds     = seconds % 60;

    	           textViewSongTitle.setText(String.format("%d:%02d", minutes, seconds));

    	           handler.postDelayed(this, 5000);
    	        }
    	    };
    	    
    	    new Thread(runnable).start();
		
	}

	private void loadCurrentCover() {
    	 
    	String streamUrl = "http://zlz-stream11.streamserver.ch/2/drs3/mp3_128";
		DownloadCoverPicture downloadCover = new DownloadCoverPicture();
		downloadCover.execute(new String[] {streamUrl});
	}

	@Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.activity_main, menu);
        return true;
    }
   
	class DownloadCoverPicture extends AsyncTask<String, Void, String> {
		@Override
		protected String doInBackground(String... urls) {
			String response = "";
			for (String url : urls) {
				try {
					IcyStreamMeta meta = new IcyStreamMeta(new URL(url));
					String title = meta.getTitle();
					String artist = meta.getArtist();
					String streamTitle = meta.getStreamTitle();
					response+=streamTitle;
					
					LastFmCoverSearch search = new LastFmCoverSearch();
					String urlCoverPicture = search.searchCover(title, artist);
//					response+=";"+urlCoverPicture;
					
					Object content = null;
				      URL urlCover = new URL(urlCoverPicture);
				      content = urlCover.getContent();
				    InputStream is = (InputStream)content;
				    image = Drawable.createFromStream(is, "src");
					
					
				} catch (Exception e) {
					Log.e(TAG, e.toString(), e);
				}
			}
			return response;
		}

		@Override
		protected void onPostExecute(String result) {
			try {
//				String urlCoverPicture = result.substring(result.lastIndexOf(";")+1);
				
				TextView tw =  (TextView) findViewById(R.id.textViewSong);
				tw.setText(result);
							    
			    ImageView imageView = (ImageView)findViewById(R.id.imageViewCover);
			    
			    imageView.setImageDrawable(image);
				
			} catch (Exception e) {
				Log.e(TAG, e.toString(), e);
			}

		}
	}
    
}
